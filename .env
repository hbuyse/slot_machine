# Need to have installed autoenv


# Path to the home of the project
PROJECT_HOME=${PWD}
EXEC=./slot_machine.out


# Unalias
unalias m mc md ml mg mva uy ck 2> /dev/null
unset -f m mc md ml mg mva uy ck 2> /dev/null


# Makefile aliases
alias m='make'
alias mc='make clean'
alias md='make distclean'
alias mva='make && valgrind --leak-check=yes ${EXEC}'
alias dx='doxygen ./doxygen/Doxyfile'


## Makefile functions
function ml
{
    make && LANGUAGE=$1 ${EXEC}
}

function mg
{
    make && LANGUAGE=$1 gdb ${EXEC}
}


# Commands aliases
alias uy="find ${PROJECT_HOME}/{src,inc} -regextype posix-extended -regex '.*\.[CcHh][XxPp]{2}?' -exec uncrustify -c ${HOME}/.uncrustify/std.cfg --no-backup --replace {} \;"
alias ck="cppcheck -q --force --enable=all ${PROJECT_HOME}"


## Command for this directory

# Create of the template file (POT)
alias pot="mkdir -p ./po && xgettext -d locale --from-code=UTF-8 --output ./po/locale.pot -k_ -s src/*.c"


# Creation of the POs (one for each language)
function create_lang
{
    # Create the directory where to put the PO files
    mkdir -p ${PROJECT_HOME}/po/$1;
    msginit --no-translator --locale $1 --output-file ${PROJECT_HOME}/po/$1/locale.po --input ${PROJECT_HOME}/po/locale.pot;
}


# Compilation of the POs to MOs
function compil_lang
{
    find ${PROJECT_HOME} -name "*.po" -print0 | while read -d $'\0' file_po
    do
        future_path=$(dirname $file_po);
        file_mo=${${file_po##*/}%.po}.mo;

        # Create the directory where to put the MO files
        mkdir -p $future_path/LC_MESSAGES;
        echo $future_path/LC_MESSAGES/$file_mo;
        msgfmt --check --verbose --output-file $future_path/LC_MESSAGES/$file_mo $file_po;
    done
}
